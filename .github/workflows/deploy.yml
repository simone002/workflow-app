name: Deploy to AWS

on:
  push:
    branches:
      - master

jobs:
  deploy-backend:
    name: Deploy Backend to ECS
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del codice
        uses: actions/checkout@v3

      - name: Configura le credenziali AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1

      # --- NUOVO STEP DI DEBUG ---
      - name: Debug delle variabili d'ambiente
        run: |
          echo "--- Inizio Debug Variabili ---"
          REGION="eu-west-1"
          DB_ENDPOINT=$(aws rds describe-db-instances --db-instance-identifier workflow-db --query 'DBInstances[0].Endpoint.Address' --output text --region $REGION || echo "ERRORE_RDS")
          USER_POOL_ID=$(aws cognito-idp list-user-pools --max-results 10 --query "UserPools[?contains(Name, 'workflow-users')].Id" --output text --region $REGION | head -n1 || echo "ERRORE_COGNITO")
          SNS_TOPIC_ARN=$(aws sns list-topics --query "Topics[?contains(TopicArn, 'workflow-notifications')].TopicArn" --output text --region $REGION || echo "ERRORE_SNS")
          SQS_QUEUE_URL=$(aws sqs get-queue-url --queue-name workflow-tasks --query QueueUrl --output text --region $REGION || echo "ERRORE_SQS")
          
          echo "DEBUG: DB_ENDPOINT = $DB_ENDPOINT"
          echo "DEBUG: USER_POOL_ID = $USER_POOL_ID"
          echo "DEBUG: SNS_TOPIC_ARN = $SNS_TOPIC_ARN"
          echo "DEBUG: SQS_QUEUE_URL = $SQS_QUEUE_URL"
          echo "--- Fine Debug Variabili ---"

      - name: Login a Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, e push dell'immagine su ECR
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: workflow-backend
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Esegui lo script di deploy
        run: |
          chmod +x ./deploy.sh
          ./deploy.sh

# Il job del frontend rimane invariato
  deploy-frontend:
    name: Deploy Frontend to S3
    runs-on: ubuntu-latest
    steps:
      - name: Checkout del codice
        uses: actions/checkout@v3

      - name: Configura le credenziali AWS
        uses: aws-actions/configure-aws-credentials@v2
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: eu-west-1
      
      - name: Setup di Node.js
        uses: actions/setup-node@v3
        with:
          node-version: '18'

      - name: Installa le dipendenze e builda il frontend
        run: |
          cd frontend
          npm install
          npm run build

      - name: Deploy su S3
        run: |
          BUCKET_NAME=$(aws s3api list-buckets --query 'Buckets[?contains(Name, `workflow-frontend`)].Name' --output text | head -1)
          aws s3 sync ./frontend/build s3://$BUCKET_NAME --delete