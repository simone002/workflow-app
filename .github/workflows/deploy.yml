name: Deploy to AWS

on:
  push:
    branches: [ master, main ]
  workflow_dispatch:

env:
  AWS_REGION: eu-west-1

jobs:
  deploy:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4

      - name: Configure AWS
        uses: aws-actions/configure-aws-credentials@v4
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.AWS_REGION }}

      - name: Login to ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v2

      - name: Build and push image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: workflow-backend
          IMAGE_TAG: latest
        run: |
          docker build -t $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG ./backend
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG

      - name: Deploy infrastructure
        run: |
          chmod +x ./deploy.sh
          ./deploy.sh

      - name: Wait for backend
        run: |
          if [ ! -f "deploy-config.txt" ]; then
            echo "Config file not found"
            exit 1
          fi
          
          BACKEND_IP=$(grep "Backend:" deploy-config.txt | awk '{print $2}' | sed 's|http://||' | cut -d':' -f1)
          echo "Backend IP: $BACKEND_IP"
          
          for i in {1..15}; do
            if curl -f -s "http://$BACKEND_IP:3000/health" >/dev/null; then
              echo "Backend ready"
              break
            fi
            echo "Waiting... ($i/15)"
            sleep 20
          done

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '18'
          cache: 'npm'
          cache-dependency-path: frontend/package-lock.json

      - name: Build and deploy frontend
        run: |
          # Get config values
          BACKEND_IP=$(grep "Backend:" deploy-config.txt | awk '{print $2}' | sed 's|http://||' | cut -d':' -f1)
          COGNITO_POOL=$(grep "Cognito User Pool:" deploy-config.txt | awk '{print $4}')
          COGNITO_CLIENT=$(grep "Cognito Client:" deploy-config.txt | awk '{print $3}')
          BUCKET_NAME=$(grep "S3 Frontend Bucket:" deploy-config.txt | awk '{print $4}')
          
          # Create frontend env
          cd frontend
          cat > .env << EOF
          REACT_APP_API_URL=http://$BACKEND_IP:3000
          REACT_APP_AWS_REGION=${{ env.AWS_REGION }}
          REACT_APP_COGNITO_USER_POOL_ID=$COGNITO_POOL
          REACT_APP_COGNITO_CLIENT_ID=$COGNITO_CLIENT
          GENERATE_SOURCEMAP=false
          SKIP_PREFLIGHT_CHECK=true
          EOF
          
          # Build and deploy
          npm ci
          npm run build
          aws s3 sync build/ s3://$BUCKET_NAME --delete
          
          echo "Frontend URL: http://$BUCKET_NAME.s3-website-${{ env.AWS_REGION }}.amazonaws.com"

      - name: Test deployment
        run: |
          BACKEND_IP=$(grep "Backend:" deploy-config.txt | awk '{print $2}' | sed 's|http://||' | cut -d':' -f1)
          
          echo "Testing endpoints:"
          curl -f "http://$BACKEND_IP:3000/health" && echo "Backend OK" || echo "Backend failed"
          
          echo "Deployment summary:"
          cat deploy-config.txt
          # Display frontend URL